{"version":3,"sources":["webpack:///src/common/admin/appearance/appearance-editor-config.token.ts","webpack:///src/common/shared/appearance/commands/appearance-commands.ts","webpack:///src/common/admin/appearance/appearance-editor/appearance-editor.service.ts","webpack:///src/common/core/utils/remove-duplicate-slashes.ts","webpack:///src/common/admin/appearance/appearance-panel-meta/appearance-panel-meta.component.html","webpack:///src/common/admin/appearance/appearance-panel-meta/appearance-panel-meta.component.ts","webpack:///src/common/admin/appearance/appearance-image-input/appearance-image-input.component.html","webpack:///src/common/admin/appearance/appearance-image-input/appearance-image-input.component.ts","webpack:///src/common/admin/appearance/highlight-in-preview.directive.ts","webpack:///src/common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme.service.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/themes-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/themes-appearance-panel.component.ts","webpack:///src/common/core/ui/custom-menu/menu-item.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-categories.service.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component.ts","webpack:///src/common/shared/icon-selector/icon-selector.component.html","webpack:///src/common/shared/icon-selector/icon-selector.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-items/menu-items.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-items/menu-items.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component.html","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component.html","webpack:///src/common/admin/appearance/appearance.component.html","webpack:///src/common/admin/appearance/appearance.component.ts","webpack:///src/common/admin/appearance/can-deactivate-appearance.guard.ts","webpack:///src/common/admin/appearance/appearance-routing.module.ts","webpack:///src/common/admin/appearance/appearance-editor/appearance-editor-resolver.service.ts","webpack:///src/common/shared/icon-selector/icon-selector.module.ts","webpack:///src/common/admin/appearance/base-appearance.module.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slider.js","webpack:///src/app/admin/appearance/homepage-appearance-panel/homepage-appearance-panel.component.html","webpack:///src/app/admin/appearance/homepage-appearance-panel/homepage-appearance-panel.component.ts","webpack:///src/app/admin/appearance/app-appearance-config.ts","webpack:///src/app/admin/appearance/app-appearance.module.ts"],"names":["APPEARANCE_EDITOR_CONFIG","DEFAULT_APPEARANCE_EDITOR_CONFIG","navigationRoutes","menus","availableRoutes","positions","sections","name","position","route","queryParams","type","Navigate","key","value","SetConfig","selector","index","Select","Deselect","SetColors","content","SetCustomCss","SetCustomHtml","AppearanceEditor","settings","router","http","toast","activePanel$","BehaviorSubject","defaultSettings","initiated$","ReplaySubject","loading$","changes$","this","next","panel","config","find","navigate","iframe","fromEvent","window","pipe","filter","e","data","URL","origin","location","hostname","subscribe","complete","forEach","setting","initConfig","initIframe","changes","addChanges","observable","saveRequest","c","post","finalize","share","open","request","panelConfig","postMessage","defaultRoute","command","previewWindow","startsWith","get","merged","all","sort","a","b","url","getBaseUrl","src","replace","contentWindow","AppearancePanelMetaComponent","path","back","AppearanceImageInputComponent","editor","uploadQueue","validator","image$","showToast","params","uri","backendUri","Image","httpParams","diskPrefix","types","image","then","files","start","response","updateValue","fileEntry","defaultValue","propagateChange","fn","provide","useExisting","multi","openModal","$event","stopPropagation","HighlightInPreviewDirective","el","nativeElement","addEventListener","selectNode","deselectNode","GeneralAppearancePanelComponent","fb","form","group","defaults","Object","keys","controls","currentValue","patchValue","valueChanges","CssThemeService","id","put","ids","delete","CrupdateCssThemeModalComponent","dialogRef","cssTheme","errors$","is_dark","default_dark","default_light","theme","setValue","update","create","close","errResponse","errors","CssThemeColorsPanelComponent","themes","colorCache","setSaveRequest","saveColors","bind","entries","colors","color","addControl","setColors","payload","ThemesAppearancePanelComponent","appearance","modal","loadedThemes$","selectedTheme$","path$","map","push","reloadThemes","querySub","unsubscribe","afterClosed","newTheme","queryParamsHandling","setSelectedTheme","closeActivePanel","show","title","body","ok","confirmed","deleteTheme","pagination","bindToQueryParams","t","openPreviousPanel","MenuItem","order","condition","target","activeExact","Math","floor","random","MenuEditor","allMenus$","activeMenu$","allMenus","commitChanges","previousIndex","currentIndex","activeMenu","items","i","indexOf","splice","item","transformLocalLinksToRoutes","baseUrl","action","JSON","stringify","setConfig","json","parse","menuData","menu","MenuItemCategoriesService","getWithCache","AddMenuItemPanelComponent","overlayPanelRef","itemCategories","linkForm","label","menuItemCategories","categories","addItem","reset","addLinkMenuItem","IconSelectorComponent","icons$","iconSelected","icons","icon","observers","length","emitValue","Ic","MenuItemsComponent","overlayPanel","cd","subscriptions","subscription","reorderActiveMenuItems","selectedMenuItem","removeItem","menuItem","valueChanged","detectChanges","MenusAppearancePanelComponent","setFromJson","slice","offsetX","panelClass","deleteActive","SeoAppearancePanelComponent","seoFields","field","control","CodeEditorModalComponent","lazyLoader","syntaxInvalid$","initEditor","contents","language","overrideDialogCloseEvents","getValue","loadAsset","ace","edit","editorEl","getSession","setMode","setTheme","$blockScrolling","Infinity","on","annotations","getAnnotations","test","text","setAnnotations","syntaxInvalid","disableClose","backdropClick","keydownEvents","event","keyCode","confirm","CustomCodeAppearancePanelComponent","initialValue","undefined","newValue","saveChanges","addCodeToPreview","AppearanceComponent","breakpoints","leftColumnIsHidden","panelPortal$","component","isMobile$","init","snapshot","routerSub","openPanel","str","closeEditor","toggleLeftSidebar","CanDeactivateAppearance","bodyBold","cancel","routes","permissions","resolve","AppearanceEditorResolver","state","catchError","mergeMap","of","canActivate","canDeactivate","children","AppearanceRoutingModule","forChild","IconSelectorModule","BaseAppearanceModule","useValue","activeEventOptions","passive","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_elementRef","_MatSliderMixinBase","MatSlider","elementRef","_focusMonitor","_changeDetectorRef","_dir","tabIndex","_ngZone","_document","_animationMode","super","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","change","input","valueChange","onTouched","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","Subscription","EMPTY","_pointerDown","disabled","isTouchEvent","button","run","oldValue","pointerPosition","getPointerPositionOnPage","_lastPointerEvent","preventDefault","_focusHostElement","_onMouseenter","_bindGlobalEvents","_updateValueFromPosition","_valueOnSlideStart","_pointerPositionOnStart","_emitInputEvent","_emitChangeEvent","_pointerMove","_pointerUp","pointerPositionOnStart","currentPointerPosition","_removeGlobalEvents","x","y","_windowBlur","parseInt","runOutsideAngular","element","v","_calculatePercentage","markForCheck","_roundToDecimal","toString","split","pop","parseFloat","toFixed","displayWith","options","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","scale","transform","_shouldInvertMouseCoords","_thumbGap","display","_getDirection","tickSize","styles","side","_invertAxis","monitor","removeEventListener","stopMonitoring","_getSliderDimensions","_updateTickIntervalPercent","_increment","max","min","defaultView","triggerEvent","document","isTouch","endEventName","_getWindow","numSteps","step","pos","top","left","height","width","exactValue","_calculateValue","closestValue","round","emit","_createChangeEvent","tickInterval","trackSize","stepsPerTick","ceil","source","percentage","_sliderWrapper","getBoundingClientRect","focus","blur","isDisabled","ɵfac","ɵcmp","selectors","viewQuery","rf","ctx","_t","first","hostAttrs","hostVars","hostBindings","_onFocus","_onBlur","_onKeydown","_onKeyup","inputs","outputs","exportAs","features","decls","vars","consts","template","_trackBackgroundStyles","_trackFillStyles","_ticksContainerStyles","_ticksStyles","_thumbContainerStyles","displayValue","directives","encapsulation","changeDetection","point","touches","changedTouches","clientX","clientY","MatSliderModule","ɵmod","ɵinj","factory","imports","CONFIG_KEY","APP_APPEARANCE_CONFIG","HomepageAppearancePanelComponent","selectedSubpanel$","headerTitle","headerSubtitle","headerImage","headerImageOpacity","headerOverlayColor1","headerOverlayColor2","footerTitle","footerSubtitle","footerImage","actions","inputText","inputButton","cta1","cta2","primaryFeatures","array","secondaryFeatures","getJson","defaultValues","addFeature","openSubpanel","subtitle","description","removeAt","AppAppearanceModule"],"mappings":"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","file":"x","sourcesContent":["import {InjectionToken} from '@angular/core';\nimport {ComponentType} from '@angular/cdk/portal';\nimport {Params} from '@angular/router';\n\nexport interface AppearanceEditorConfig {\n    navigationRoutes: string[];\n    defaultRoute?: string;\n    sections?: AppearanceEditorField[];\n    menus: {\n        availableRoutes: string[],\n        positions?: string[],\n    };\n}\n\nexport interface AppearanceEditorField {\n    name: string;\n    component?: ComponentType<any>;\n    position?: number;\n    route?: string;\n    queryParams?: Params;\n}\n\nexport const APPEARANCE_EDITOR_CONFIG = new InjectionToken<AppearanceEditorConfig[]>('APPEARANCE_EDITOR_CONFIG');\n\nexport const DEFAULT_APPEARANCE_EDITOR_CONFIG: AppearanceEditorConfig = {\n    navigationRoutes: [],\n    menus: {\n        availableRoutes: [\n            'login',\n            'register',\n            'contact',\n            'billing/pricing',\n            'account-settings',\n            'admin/appearance',\n            'admin/users',\n            'admin/settings/authentication',\n            'admin/settings/branding',\n            'admin/settings/cache',\n            'admin/settings/providers',\n            'admin/roles',\n        ],\n        positions: [\n            'admin-navbar',\n            'custom-page-navbar',\n            'auth-page-footer',\n        ]\n    },\n    sections: [\n        {name: 'general', position: 1},\n        {name: 'themes', position: 2},\n        {name: 'menus', position: 3},\n        {name: 'custom-code', position: 4},\n        {name: 'seo-settings', position: 5}\n    ]\n};\n","import { AppearanceCommand } from './appearance-command';\nimport { CommandTypes } from './command-types';\nimport {Params} from '@angular/router';\n\nexport class Navigate implements AppearanceCommand {\n    type = CommandTypes.Navigate;\n    constructor(public route: string, public queryParams: Params) {}\n}\n\nexport class SetConfig implements AppearanceCommand {\n    type = CommandTypes.SetConfig;\n    constructor(public key: string, public value: string|number) {}\n}\n\nexport class Select implements AppearanceCommand {\n    type = CommandTypes.Select;\n    constructor(public selector: string, public index = 0) {}\n}\n\nexport class Deselect implements AppearanceCommand {\n    type = CommandTypes.Deselect;\n}\n\nexport class SetColors implements AppearanceCommand {\n    type = CommandTypes.SetColors;\n    constructor(public key: string, public value: string) {}\n}\n\nexport class SetCustomCss implements AppearanceCommand {\n    type = CommandTypes.SetCustomCss;\n    constructor(public content: string) {}\n}\n\nexport class SetCustomHtml implements AppearanceCommand {\n    type = CommandTypes.SetCustomHtml;\n    constructor(public content: string) {}\n}\n\nexport type AllCommands = Navigate | SetConfig | Select;\n","import {Injectable} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {Settings} from '@common/core/config/settings.service';\nimport {Deselect, Navigate, Select, SetConfig} from '@common/shared/appearance/commands/appearance-commands';\nimport {AppearanceCommand} from '@common/shared/appearance/commands/appearance-command';\nimport {APPEARANCE_TOKEN} from '@common/shared/appearance/appearance-listener.service';\nimport {BehaviorSubject, fromEvent, Observable, ReplaySubject} from 'rxjs';\nimport {filter, finalize, share} from 'rxjs/operators';\nimport {slugifyString} from '@common/core/utils/slugify-string';\nimport {CssThemeColors} from '@common/core/types/models/CssTheme';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\nimport {removeDuplicateSlashes} from '@common/core/utils/remove-duplicate-slashes';\nimport {AppearanceEditorConfig, AppearanceEditorField} from '@common/admin/appearance/appearance-editor-config.token';\nimport deepmerge from 'deepmerge';\n\nexport interface EditorChanges {\n    [key: string]: string|number|object;\n    colors?: CssThemeColors;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AppearanceEditor {\n    public activePanel$ = new BehaviorSubject<AppearanceEditorField>(null);\n    public defaultSettings: {[key: string]: any} = {};\n    public initiated$ = new ReplaySubject(1);\n    private previewWindow: Window;\n\n    public loading$ = new BehaviorSubject<boolean>(false);\n    private saveRequest: (changes: EditorChanges) => Observable<void>;\n    public changes$ = new BehaviorSubject<EditorChanges>(null);\n    public config: AppearanceEditorConfig;\n\n    constructor(\n        private settings: Settings,\n        private router: Router,\n        private http: AppHttpClient,\n        private toast: Toast,\n    ) {}\n\n    public addChanges(value: EditorChanges) {\n        this.changes$.next({...this.changes$.value, ...value});\n    }\n    \n    public openPanel(name: string) {\n        const panel = this.config.sections.find(value => {\n            return slugifyString(value.name) === name;\n        });\n        this.activePanel$.next(panel);\n        this.navigate(panel);\n    }\n\n    public init(iframe: HTMLIFrameElement, defaultSettings: {name: string, value: any}[], config: AppearanceEditorConfig[]) {\n        // listen for 'initiated' event from iframe window\n        fromEvent(window, 'message')\n            .pipe(filter((e: MessageEvent) => {\n                return e.data === APPEARANCE_TOKEN && (new URL(e.origin).hostname) === window.location.hostname;\n            })).subscribe(() => {\n                this.initiated$.next(true);\n                this.initiated$.complete();\n                if (this.activePanel$.value) {\n                    this.navigate(this.activePanel$.value);\n                }\n            });\n\n        defaultSettings.forEach(setting => {\n            if (setting.name === 'env') {\n                this.defaultSettings = {...this.defaultSettings, ...setting.value};\n            } else {\n                this.defaultSettings[setting.name] = setting.value;\n            }\n        });\n\n        this.initConfig(config);\n        this.initIframe(iframe);\n        return this.initiated$;\n    }\n\n    public saveChanges(changes?: EditorChanges): Observable<unknown> {\n        if (changes) {\n            this.addChanges(changes);\n        }\n        this.loading$.next(true);\n        const request = this.saveRequest ?\n            this.saveRequest :\n            c => this.http.post<GenericBackendResponse<any>>('admin/appearance', c);\n        const observable = request(this.changes$.value)\n            .pipe(\n                finalize(() => this.loading$.next(false)),\n                share()\n            );\n            observable.subscribe(() => {\n                this.changes$.next(null);\n                this.toast.open('Appearance saved');\n            });\n        return observable;\n    }\n\n    public setSaveRequest(request: (changes: EditorChanges) => Observable<void>) {\n        this.saveRequest = request;\n    }\n\n    public closeActivePanel() {\n        this.router.navigate(['/admin/appearance']);\n    }\n\n    public navigate(panelConfig: AppearanceEditorField) {\n        const route = panelConfig?.route || this.config.defaultRoute;\n        this.postMessage(new Navigate(route, panelConfig?.queryParams));\n    }\n\n    public setConfig(key: string, value: string|number) {\n        this.postMessage(new SetConfig(key, value));\n    }\n\n    public selectNode(selector: string, index = 0) {\n        if ( ! selector) return;\n        this.postMessage(new Select(selector, index));\n    }\n\n    public deselectNode() {\n        this.postMessage(new Deselect());\n    }\n\n    public postMessage(command: AppearanceCommand) {\n        this.previewWindow.postMessage(command, '*');\n    }\n\n    public currentValue(key: string) {\n        if (key.startsWith('env.') || key.startsWith('custom-code.')) {\n            return this.defaultSettings[key];\n        } else {\n            return this.settings.get(key);\n        }\n    }\n\n    private initConfig(config: AppearanceEditorConfig[]) {\n        const merged = deepmerge.all(config) as AppearanceEditorConfig;\n        merged.sections = merged.sections.sort((a, b) => (a.position > b.position) ? 1 : -1);\n        if ( ! merged.defaultRoute) merged.defaultRoute = '/';\n        this.config = merged;\n    }\n\n    private initIframe(iframe: HTMLIFrameElement) {\n        const url = this.settings.getBaseUrl() + this.config.defaultRoute + `?be-preview-mode=${APPEARANCE_TOKEN}`;\n        iframe.src = removeDuplicateSlashes(url);\n        this.previewWindow = iframe.contentWindow;\n    }\n}\n","export function removeDuplicateSlashes(url: string): string {\n    return url.replace(/([^:]\\/)\\/+/g, '$1');\n}\n","<div class=\"back-button\" (click)=\"back.emit()\">\n    <mat-icon svgIcon=\"keyboard-arrow-left\"></mat-icon>\n</div>\n<div class=\"title\">\n    <div class=\"static\" trans>Customizing</div>\n    <div class=\"path\">\n        <ng-container *ngFor=\"let item of path; last as isLast; first as isFirst;\">\n            <span *ngIf=\"item\">\n                <mat-icon svgIcon=\"keyboard-arrow-right\" class=\"separator\" *ngIf=\"!isFirst\"></mat-icon>\n                <span class=\"name\" [class.last]=\"isLast\" trans>{{viewName(item)}}</span>\n            </span>\n        </ng-container>\n    </div>\n</div>","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {snakeCase} from '@common/core/utils/snake-case';\n\n@Component({\n    selector: 'appearance-panel-meta',\n    templateUrl: './appearance-panel-meta.component.html',\n    styleUrls: ['./appearance-panel-meta.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppearancePanelMetaComponent {\n    @Input() path: string[] = [];\n    @Output() back = new EventEmitter();\n\n    public viewName(name: string) {\n        return snakeCase(name).replace(/_/g , ' ');\n    }\n}\n","<div class=\"field-container\" (click)=\"openModal()\">\n    <div class=\"label fake-label\" trans><ng-content></ng-content></div>\n    <div class=\"img-container\">\n        <image-or-icon [src]=\"image\" *ngIf=\"image$ | async as image; else noImage\"></image-or-icon>\n\n        <ng-template #noImage>\n            <div class=\"no-image\">\n                <mat-icon svgIcon=\"photo-size-select-actual\"></mat-icon>\n                <span class=\"text\" trans>Upload</span>\n            </div>\n        </ng-template>\n\n        <div class=\"actions-dropdown\">\n            <button class=\"no-style\" [matMenuTriggerFor]=\"actionsMenu\" (click)=\"$event.stopPropagation()\"><mat-icon svgIcon=\"settings\" class=\"trigger-icon\"></mat-icon></button>\n\n            <mat-menu #actionsMenu>\n                <div mat-menu-item (click)=\"remove()\" *ngIf=\"image$ | async\" trans>Remove</div>\n                <div mat-menu-item (click)=\"useDefault()\" *ngIf=\"defaultValue\" trans>Use Default</div>\n            </mat-menu>\n        </div>\n    </div>\n</div>\n<mat-progress-bar mode=\"indeterminate\" color=\"accent\" *ngIf=\"loading$ | async\"></mat-progress-bar>\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {AppearanceImageUploadValidator} from '@common/admin/appearance/appearance-image-input/appearance-image-upload-validator';\nimport {Settings} from '@common/core/config/settings.service';\nimport {openUploadWindow} from '@common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject} from 'rxjs';\nimport {randomString} from '@common/core/utils/random-string';\nimport {finalize} from 'rxjs/operators';\nimport { UploadUri } from '@common/uploads/types/upload-uri.enum';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\n\n@Component({\n    selector: 'appearance-image-input',\n    templateUrl: './appearance-image-input.component.html',\n    styleUrls: ['./appearance-image-input.component.scss'],\n    host: {'tabindex': '0'},\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: AppearanceImageInputComponent,\n        multi: true,\n    }]\n})\nexport class AppearanceImageInputComponent implements ControlValueAccessor {\n    @Input() defaultValue: string;\n    @Input() backendUri: string;\n    @Input() diskPrefix: string;\n    private propagateChange: Function;\n    public image$ = new BehaviorSubject(null);\n    public loading$ = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        private editor: AppearanceEditor,\n        private uploadQueue: UploadQueueService,\n        private validator: AppearanceImageUploadValidator,\n        public settings: Settings,\n    ) {\n        this.validator.showToast = true;\n    }\n\n    public openModal() {\n        const params: UploadApiConfig = {\n            uri: this.backendUri || UploadUri.Image,\n            httpParams: {diskPrefix: this.diskPrefix},\n            validator: this.validator,\n        };\n        openUploadWindow({types: [UploadInputTypes.image]}).then(files => {\n            this.loading$.next(true);\n            this.uploadQueue.start(files, params)\n                .pipe(finalize(() => this.loading$.next(false)))\n                .subscribe(response => {\n                    this.updateValue(response.fileEntry.url);\n                });\n        });\n    }\n\n    public remove() {\n        this.updateValue(null);\n    }\n\n    public useDefault() {\n        this.updateValue(this.defaultValue);\n    }\n\n    private updateValue(value?: string) {\n        this.propagateChange(value);\n        // make sure new image is loaded by browser as path will be the same\n        this.image$.next(value + `?v=${randomString(8)}`);\n    }\n\n    public writeValue(value: string) {\n        this.image$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n}\n","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\n\n@Directive({\n    selector: '[highlightInPreview]'\n})\nexport class HighlightInPreviewDirective implements OnInit {\n    @Input('highlightInPreview') selector: string;\n\n    constructor(\n        private el: ElementRef<HTMLElement>,\n        private editor: AppearanceEditor,\n    ) {}\n\n    public ngOnInit(): void {\n        this.el.nativeElement.addEventListener('focus', () => {\n            this.editor.selectNode(this.selector);\n        });\n\n        this.el.nativeElement.addEventListener('blur', () => {\n            this.editor.deselectNode();\n        });\n    }\n}\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\n\n@Component({\n    selector: 'general-appearance-panel',\n    templateUrl: './general-appearance-panel.component.html',\n    styleUrls: ['./general-appearance-panel.component.scss'],\n    host: {'class': 'appearance-panel'},\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GeneralAppearancePanelComponent implements OnInit {\n    public form = this.fb.group({\n        'branding.logo_light': [''],\n        'branding.logo_dark': [''],\n        'branding.favicon': [''],\n        'env.app_name': [''],\n        'branding.site_description': [''],\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        public editor: AppearanceEditor,\n    ) {}\n\n    ngOnInit() {\n        const defaults = {};\n        Object.keys(this.form.controls).forEach(key => {\n          defaults[key] = this.editor.currentValue(key);\n        });\n        this.form.patchValue(defaults);\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.addChanges(value);\n        });\n    }\n\n    public defaultValue(key: string) {\n        return this.editor.defaultSettings[key];\n    }\n}\n","<appearance-panel-meta [path]=\"['General']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div [formGroup]=\"form\" class=\"appearance-panel-content many-inputs\">\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.logo_light')\" formControlName=\"branding.logo_light\" diskPrefix=\"branding_media\" highlightInPreview=\".logo\">\n        Logo #1 (For top navbar)\n    </appearance-image-input>\n\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.logo_dark')\" formControlName=\"branding.logo_dark\" diskPrefix=\"branding_media\" highlightInPreview=\".logo\">\n        Logo #2 (Everywhere else)\n    </appearance-image-input>\n\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.favicon')\" backendUri=\"uploads/favicon\" diskPrefix=\"branding_media\" formControlName=\"branding.favicon\">\n        Favicon\n    </appearance-image-input>\n\n    <div class=\"input-container\">\n        <label for=\"env.app_name\" trans>Site Name</label>\n        <input type=\"text\" id=\"env.app_name\" [placeholder]=\"defaultValue('env.app_name')\" formControlName=\"env.app_name\">\n    </div>\n\n    <div class=\"input-container\">\n        <label for=\"branding.site_description\" trans>Site Description</label>\n        <textarea id=\"branding.site_description\" [placeholder]=\"defaultValue('branding.site_description')\" rows=\"4\" formControlName=\"branding.site_description\"></textarea>\n    </div>\n</div>\n","import {Injectable} from '@angular/core';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\n\nconst BASE_URI = 'css-theme';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CssThemeService {\n    constructor(private http: AppHttpClient) {}\n\n    public all(): PaginatedBackendResponse<CssTheme> {\n        return this.http.get(BASE_URI);\n    }\n\n    public create(params: Partial<CssTheme>): BackendResponse<{ theme: CssTheme }> {\n        return this.http.post(BASE_URI, params);\n    }\n\n    public update(id, params: Partial<CssTheme>): BackendResponse<{ theme: CssTheme }> {\n        return this.http.put(`${BASE_URI}/${id}`, params);\n    }\n\n    public delete(ids: number[]): BackendResponse<void> {\n        return this.http.delete(`${BASE_URI}/${ids}`);\n    }\n}\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title>\n        <span *ngIf=\"data.theme\" trans>Update Theme</span>\n        <span *ngIf=\"!data.theme\" trans>Create Theme</span>\n    </h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<form (ngSubmit)=\"confirm()\" ngNativeValidate [formGroup]=\"form\" *ngIf=\"errors$ | async as errors\">\n    <mat-dialog-content class=\"many-inputs\">\n        <div class=\"input-container\">\n            <label for=\"name\" trans>Name</label>\n            <input type=\"text\" id=\"name\" formControlName=\"name\" required minlength=\"3\">\n            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"is_dark\" formControlName=\"is_dark\" trans>Dark Theme</mat-slide-toggle>\n            <p trans>Whether this theme has light text on dark background.</p>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"default_dark\" formControlName=\"default_dark\" trans>Default Dark Theme</mat-slide-toggle>\n            <p trans>Whether this theme should be used as default dark theme.</p>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"default_light\" formControlName=\"default_light\" trans>Default Light Theme</mat-slide-toggle>\n            <p trans>Whether this theme should be used as default light theme.</p>\n        </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>\n            <span *ngIf=\"data.theme; else creating\">Update</span>\n            <ng-template #creating>\n                <span>Create</span>\n            </ng-template>\n        </button>\n    </mat-dialog-actions>\n</form>\n\n\n","import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {FormBuilder} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\nimport {filter} from 'rxjs/operators';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\n\ninterface CrupdateCssThemeModalData {\n    theme: CssTheme;\n}\n\n@Component({\n    selector: 'crupdate-css-theme-modal',\n    templateUrl: './crupdate-css-theme-modal.component.html',\n    styleUrls: ['./crupdate-css-theme-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateCssThemeModalComponent {\n    public loading$ = new BehaviorSubject(false);\n    public errors$ = new BehaviorSubject<{[K in keyof Partial<CssTheme>]: string}>({});\n    public form = this.fb.group({\n        name: [''],\n        is_dark: [false],\n        default_dark: [false],\n        default_light: [false],\n    });\n\n    constructor(\n        private dialogRef: MatDialogRef<CrupdateCssThemeModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateCssThemeModalData,\n        private cssTheme: CssThemeService,\n        private toast: Toast,\n        private fb: FormBuilder,\n    ) {\n        if (data.theme) {\n            this.form.patchValue(data.theme);\n        }\n\n        // make sure \"default_light\" and \"default_dark\"\n        // can't be toggled on at the same time\n        this.form.get('default_dark')\n            .valueChanges\n            .pipe(filter(value => !!value))\n            .subscribe(() => {\n                this.form.get('default_light').setValue(false);\n            });\n        this.form.get('default_light')\n            .valueChanges\n            .pipe(filter(value => !!value))\n            .subscribe(() => {\n                this.form.get('default_dark').setValue(false);\n            });\n    }\n\n    public confirm() {\n        const request = this.data.theme ?\n            this.cssTheme.update(this.data.theme.id, this.form.value) :\n            this.cssTheme.create(this.form.value);\n        request.subscribe(response => {\n            this.toast.open(this.data.theme ? 'Theme updated' : 'Theme created');\n            this.close(response.theme);\n        }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\n    }\n\n    public close(theme?: CssTheme) {\n        this.dialogRef.close(theme);\n    }\n}\n","<ul class=\"unstyled-list\" [formGroup]=\"form\">\n    <li *ngFor=\"let color of theme.colors | keyvalue\">\n        <color-picker-input [formControlName]=\"color.key\" trans>{{viewName(color.key)}}</color-picker-input>\n    </li>\n</ul>\n","import {ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CssTheme, CssThemeColors} from '@common/core/types/models/CssTheme';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {SetColors} from '@common/shared/appearance/commands/appearance-commands';\nimport {AppearanceEditor, EditorChanges} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\n\n@Component({\n    selector: 'css-theme-colors-panel',\n    templateUrl: './css-theme-colors-panel.component.html',\n    styleUrls: ['./css-theme-colors-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CssThemeColorsPanelComponent implements OnInit, OnDestroy {\n    @Input() theme: CssTheme;\n    public form = new FormGroup({});\n    private colorCache: CssThemeColors = {};\n\n    constructor(\n        private editor: AppearanceEditor,\n        private themes: CssThemeService,\n    ) {}\n\n    ngOnInit() {\n        this.editor.setSaveRequest(this.saveColors.bind(this));\n\n        // build form\n        Object.entries(this.theme.colors).forEach(([name, color]) => {\n            this.form.addControl(name, new FormControl(color));\n        });\n\n        this.editor.initiated$.subscribe(() => {\n            this.setColors(this.theme.colors);\n            this.form.valueChanges.subscribe((value: CssThemeColors) => {\n                this.setColors(value);\n                this.editor.addChanges({'colors': value});\n            });\n        });\n    }\n\n    ngOnDestroy() {\n        this.editor.setSaveRequest(null);\n    }\n\n    private saveColors(payload: EditorChanges) {\n        return this.themes.update(this.theme.id, payload);\n    }\n\n    private setColors(colors: CssThemeColors) {\n        Object.entries(colors).forEach(([name, color]) => {\n            // make sure we only set colors that actually changed\n            // to keep performance as good as possible\n            if (this.colorCache[name] !== color) {\n                this.editor.postMessage(new SetColors(name, color));\n                this.colorCache[name] = color;\n            }\n        });\n    }\n\n    public viewName(name: string) {\n        return name.replace('be-', '').replace(/-/g, ' ');\n    }\n}\n","<appearance-panel-meta [path]=\"path$ | async\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n    <css-theme-colors-panel\n            [theme]=\"selectedTheme\"\n            *ngIf=\"selectedTheme$ | async as selectedTheme else themesList\"\n    ></css-theme-colors-panel>\n\n    <ng-template #themesList>\n        <button mat-raised-button color=\"accent\" type=\"button\" class=\"new-theme-button\" (click)=\"openCrupdateThemeModal()\" trans>New Theme</button>\n        <ul class=\"unstyled-list\">\n            <li class=\"nav-item\" *ngFor=\"let theme of loadedThemes$ | async\" (click)=\"setSelectedTheme(theme)\">\n                <div class=\"name\">{{theme.name}}</div>\n                <div class=\"actions\" (click)=\"$event.stopPropagation()\">\n                    <button mat-icon-button type=\"button\" (click)=\"setSelectedTheme(theme)\">\n                        <mat-icon svgIcon=\"drop-custom\"></mat-icon>\n                    </button>\n                    <button mat-icon-button type=\"button\" (click)=\"openCrupdateThemeModal(theme);\">\n                        <mat-icon svgIcon=\"edit\"></mat-icon>\n                    </button>\n                    <button mat-icon-button type=\"button\" (click)=\"maybeDeleteThemeModal(theme)\">\n                        <mat-icon svgIcon=\"delete\"></mat-icon>\n                    </button>\n                </div>\n            </li>\n        </ul>\n    </ng-template>\n</div>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay overlay-partial\"></loading-indicator>\n","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {CrupdateCssThemeModalComponent} from '@common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {finalize, map} from 'rxjs/operators';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {ActivatedRoute, Router} from '@angular/router';\n\n@Component({\n    selector: 'themes-appearance-panel',\n    templateUrl: './themes-appearance-panel.component.html',\n    styleUrls: ['./themes-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ThemesAppearancePanelComponent implements OnInit, OnDestroy {\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public loadedThemes$ = new BehaviorSubject<CssTheme[]>([]);\n    public selectedTheme$ = new BehaviorSubject<CssTheme>(null);\n    private querySub: Subscription;\n\n    public path$ = this.selectedTheme$.pipe(map(theme => {\n        const path = ['Themes'];\n        if (theme) path.push(theme.name);\n        return path;\n    }));\n\n    constructor(\n        public appearance: AppearanceEditor,\n        private modal: Modal,\n        private themes: CssThemeService,\n        private toast: Toast,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.reloadThemes();\n    }\n\n    ngOnDestroy() {\n        this.querySub && this.querySub.unsubscribe();\n    }\n\n    public openCrupdateThemeModal(theme?: CssTheme) {\n        this.modal.open(CrupdateCssThemeModalComponent, {theme})\n            .afterClosed()\n            .subscribe(newTheme => {\n                if (newTheme) {\n                    this.reloadThemes();\n                }\n            });\n    }\n\n    public setSelectedTheme(theme?: CssTheme) {\n        this.router.navigate([], {queryParams: {theme: theme && theme.id}, queryParamsHandling: 'merge'});\n    }\n\n    public openPreviousPanel() {\n        if (this.selectedTheme$.value) {\n            this.setSelectedTheme();\n        } else {\n            this.appearance.closeActivePanel();\n        }\n    }\n\n    public maybeDeleteThemeModal(theme: CssTheme) {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Theme',\n            body:  'Are you sure you want to delete this theme?',\n            ok:    'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.deleteTheme(theme);\n        });\n    }\n\n    private reloadThemes() {\n        this.loading$.next(true);\n        this.themes.all()\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.loadedThemes$.next(response.pagination.data);\n                this.bindToQueryParams();\n            });\n    }\n\n    private deleteTheme(theme: CssTheme) {\n        this.themes.delete([theme.id]).subscribe(() => {\n            this.toast.open('Theme deleted');\n            this.reloadThemes();\n        });\n    }\n\n    private bindToQueryParams() {\n        if (this.querySub) return;\n        this.querySub = this.route.queryParams.subscribe((params: {theme?: string}) => {\n            const theme = this.loadedThemes$.value.find(t => t.id === +params.theme);\n            this.selectedTheme$.next(theme);\n        });\n    }\n}\n","export class MenuItem {\n    id: number|string;\n    label: string;\n    action: string;\n\n    // ID for model if action matches to specific model. If action\n    // points to a specific custom page, model_id will be that page's ID.\n    model_id: number;\n    type: 'page' | 'link' | 'route' = 'link';\n    order = 1;\n    icon: string;\n    condition: MenuItemCondition = null;\n    target: string = null;\n    position = 0;\n    activeExact = false;\n\n    constructor(params: Partial<MenuItem> = {}) {\n        for (const name in params) {\n            this[name] = params[name];\n        }\n        this.id = Math.floor(Math.random() * (1000 - 1));\n    }\n}\n\nexport type MenuItemCondition = string|string[]|Function;\n","import {Injectable} from '@angular/core';\nimport {moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Menu} from '@common/core/ui/custom-menu/menu';\nimport {Settings} from '@common/core/config/settings.service';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\nimport {BehaviorSubject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MenuEditor {\n    public allMenus$ = new BehaviorSubject< Menu[]>([]);\n    public activeMenu$ = new BehaviorSubject<Menu>(null);\n\n    constructor(\n        private settings: Settings,\n        private appearance: AppearanceEditor,\n    ) {}\n\n    public create() {\n        const allMenus = [...this.allMenus$.value];\n        this.activeMenu$.next(new Menu({name: 'New Menu'}));\n        allMenus.push(this.activeMenu$.value);\n        this.allMenus$.next(allMenus);\n        this.commitChanges();\n    }\n\n    public reorderActiveMenuItems(previousIndex: number, currentIndex: number) {\n        const activeMenu = {...this.activeMenu$.value};\n        moveItemInArray(activeMenu.items, previousIndex, currentIndex);\n        this.activeMenu$.next(activeMenu);\n        this.commitChanges();\n    }\n\n    public deleteActive() {\n        const allMenus = [...this.allMenus$.value];\n        const i = allMenus.indexOf(this.activeMenu$.value);\n        allMenus.splice(i, 1);\n        this.activeMenu$.next(null);\n        this.allMenus$.next(allMenus);\n        this.commitChanges();\n    }\n\n    public addItem(item: MenuItem) {\n        const activeMenu = {...this.activeMenu$.value};\n        item = this.transformLocalLinksToRoutes(item);\n        activeMenu.items.push(item);\n        this.activeMenu$.next(activeMenu);\n        this.commitChanges();\n    }\n\n    public removeItem(item: MenuItem) {\n        const activeMenu = {...this.activeMenu$.value};\n        const i = this.activeMenu$.value.items.indexOf(item);\n        activeMenu.items.splice(i, 1);\n        this.activeMenu$.next(activeMenu);\n        this.commitChanges();\n    }\n\n    private transformLocalLinksToRoutes(item: MenuItem): MenuItem {\n        const baseUrl = this.settings.getBaseUrl();\n\n        if (item.type !== 'link' || item.action.indexOf(baseUrl) === -1) return item;\n\n        item.type = 'route';\n        item.action = item.action.replace(this.settings.getBaseUrl(), '');\n        return item;\n    }\n\n    public commitChanges() {\n        const menus = JSON.stringify(this.allMenus$.value);\n        this.appearance.setConfig('menus', menus);\n        this.appearance.addChanges({'menus': menus});\n    }\n\n    public setFromJson(json: string) {\n        if ( ! json) return;\n        const menus = JSON.parse(json);\n\n        if ( ! menus) return;\n\n        const allMenus = menus.map(menuData => {\n            const menu = new Menu(menuData);\n            menu.items = menu.items.map(item => new MenuItem(item));\n            return menu;\n        });\n        this.allMenus$.next(allMenus);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {MenuItemCategory} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-category';\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MenuItemCategoriesService {\n    constructor(private http: HttpCacheClient) {}\n\n    public get(): BackendResponse<{categories: MenuItemCategory[]}> {\n        return this.http.getWithCache('admin/appearance/menu-categories');\n    }\n}\n","<div class=\"header\">\n    <span class=\"title\" trans>New Menu Item</span>\n    <mat-icon svgIcon=\"close\" (click)=\"close()\"></mat-icon>\n</div>\n<div class=\"new-item-tabs\">\n    <mat-accordion>\n        <form (ngSubmit)=\"addLinkMenuItem()\" [formGroup]=\"linkForm\" ngNativeValidate>\n            <mat-expansion-panel class=\"mat-elevation-z\">\n                <mat-expansion-panel-header><mat-panel-title trans>Link</mat-panel-title></mat-expansion-panel-header>\n                <div class=\"many-inputs expansion-panel-content\">\n                    <div class=\"input-container\">\n                        <label for=\"external-link-url\" trans>URL</label>\n                        <input type=\"url\" id=\"external-link-url\" formControlName=\"action\" required>\n                    </div>\n                    <div class=\"input-container\">\n                        <label for=\"external-link-text\" trans>Link Text</label>\n                        <input type=\"text\" id=\"external-link-text\" formControlName=\"label\" required>\n                    </div>\n                </div>\n                <mat-action-row>\n                    <button mat-button color=\"accent\" type=\"submit\" trans>Add</button>\n                </mat-action-row>\n            </mat-expansion-panel>\n        </form>\n        <mat-expansion-panel class=\"mat-elevation-z\">\n            <mat-expansion-panel-header><mat-panel-title trans>Route</mat-panel-title></mat-expansion-panel-header>\n            <div class=\"items-list expansion-panel-content\">\n                <div class=\"item\" *ngFor=\"let route of appearance.config.menus.availableRoutes\"\n                     (click)=\"addRouteMenuItem(route)\">{{route}}\n                </div>\n            </div>\n        </mat-expansion-panel>\n        <mat-expansion-panel class=\"mat-elevation-z\" *ngFor=\"let category of menuItemCategories\">\n            <mat-expansion-panel-header><mat-panel-title trans>{{category.name}}</mat-panel-title></mat-expansion-panel-header>\n            <div class=\"items-list expansion-panel-content\">\n                <div class=\"item\" *ngFor=\"let item of category.items\" (click)=\"addCustomMenuItem(item)\">{{item.label}}</div>\n            </div>\n        </mat-expansion-panel>\n    </mat-accordion>\n</div>","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\nimport {FormBuilder} from '@angular/forms';\nimport {MenuItemCategory} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-category';\nimport {MenuItemCategoriesService} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-categories.service';\n\n@Component({\n    selector: 'add-menu-item-panel',\n    templateUrl: './add-menu-item-panel.component.html',\n    styleUrls: ['./add-menu-item-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddMenuItemPanelComponent implements OnInit {\n    public linkForm = this.fb.group({\n        action: [''],\n        label: [''],\n    });\n    public menuItemCategories: MenuItemCategory[];\n\n    constructor(\n        public editor: MenuEditor,\n        public appearance: AppearanceEditor,\n        private overlayPanelRef: OverlayPanelRef,\n        private fb: FormBuilder,\n        private itemCategories: MenuItemCategoriesService,\n    ) {}\n\n    ngOnInit() {\n        this.itemCategories.get().subscribe(response => {\n            this.menuItemCategories = response.categories;\n        });\n    }\n\n    public addLinkMenuItem() {\n        this.editor.addItem(new MenuItem({\n            type: 'link',\n            label: this.linkForm.value.label,\n            action: this.linkForm.value.action,\n        }));\n\n        this.linkForm.reset();\n        this.close();\n    }\n\n    public addRouteMenuItem(route: string) {\n        this.editor.addItem(new MenuItem({\n            type: 'route',\n            label: route,\n            action: route,\n        }));\n        this.close();\n    }\n\n    public addCustomMenuItem(item: Partial<MenuItem>) {\n        this.editor.addItem(new MenuItem(item));\n        this.close();\n    }\n\n    public close() {\n        this.overlayPanelRef.close();\n    }\n}\n","<button mat-icon-button (click)=\"selectIcon(icon)\" *ngFor=\"let icon of icons$ | async\">\n  <mat-icon [svgIcon]=\"icon\"></mat-icon>\n</button>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay overlay-partial\"></loading-indicator>","import {ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {finalize} from 'rxjs/operators';\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\n\n@Component({\n    selector: 'icon-selector',\n    templateUrl: './icon-selector.component.html',\n    styleUrls: ['./icon-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconSelectorComponent implements OnInit {\n    public icons$: BehaviorSubject<string[]> = new BehaviorSubject([]);\n    public loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n    @Output() iconSelected = new EventEmitter<string>();\n\n    constructor(\n        private http: HttpCacheClient,\n        private overlayPanelRef: OverlayPanelRef,\n    ) {}\n\n    ngOnInit() {\n        this.loading$.next(true);\n        this.http.get<GenericBackendResponse<{icons: string[]}>>('admin/icons')\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.icons$.next(response.icons);\n            });\n    }\n\n    public selectIcon(icon: string) {\n        // component is used inline\n        if (this.iconSelected.observers.length) {\n            this.iconSelected.next(icon);\n        // component is used as overlay panel\n        } else {\n            this.overlayPanelRef.emitValue(icon);\n            this.overlayPanelRef.close();\n        }\n\n    }\n}\n","<div class=\"title\" trans>Menu Items</div>\n\n<mat-accordion cdkDropList (cdkDropListDropped)=\"reorderMenuItems($event)\" *ngIf=\"menus.activeMenu$ | async as activeMenu; else noActiveMenu\">\n    <mat-expansion-panel\n            class=\"mat-elevation-z menu-item-container\"\n            cdkDrag\n            *ngFor=\"let menuItem of activeMenu.items\"\n            (opened)=\"toggleMenuItem(menuItem)\"\n            (closed)=\"toggleMenuItem(menuItem)\"\n            [attr.data-id]=\"menuItem.id\"\n    >\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                <mat-icon class=\"drag-handle\" cdkDragHandle svgIcon=\"drag-handle\"></mat-icon>\n                <span class=\"name\">{{menuItem.label}}</span>\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <div class=\"many-inputs menu-item-list\">\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-label'}}\" trans>Label</label>\n                <input type=\"text\" [(ngModel)]=\"menuItem.label\" id=\"{{menuItem.id + '-label'}}\" (ngModelChange)=\"menus.commitChanges()\">\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-type'}}\" trans>Type</label>\n                <select [(ngModel)]=\"menuItem.type\" id=\"{{menuItem.id + '-type'}}\" (ngModelChange)=\"menus.commitChanges()\">\n                    <option value=\"link\" trans>Link</option>\n                    <option value=\"route\" trans>Route</option>\n                    <option value=\"page\" trans>Page</option>\n                </select>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-action'}}\" trans>Action</label>\n                <input type=\"text\" [(ngModel)]=\"menuItem.action\" id=\"{{menuItem.id + '-action'}}\" (ngModelChange)=\"menus.commitChanges()\">\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-condition'}}\" trans>Condition</label>\n                <select [(ngModel)]=\"menuItem.condition\" id=\"{{menuItem.id + '-condition'}}\" (ngModelChange)=\"menus.commitChanges()\">\n                    <option [ngValue]=\"null\" trans>None</option>\n                    <option value=\"auth\" trans>Show to Logged in Users Only</option>\n                    <option value=\"guest\" trans>Show to Guest Users Only</option>\n                    <option value=\"admin\" trans>Show to Admin Only</option>\n                </select>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-target'}}\" trans>Open link in</label>\n                <select [(ngModel)]=\"menuItem.target\" id=\"{{menuItem.id + '-target'}}\" (ngModelChange)=\"menus.commitChanges()\">\n                    <option value=\"_self\" trans>Same Window</option>\n                    <option value=\"_blank\" trans>New Window</option>\n                </select>\n            </div>\n\n            <div class=\"input-container icon-input-container\" #iconInput (click)=\"openIconSelector(iconInput, menuItem)\">\n                <label for=\"{{menuItem.id + '-icon'}}\" trans>Icon</label>\n                <input type=\"text\" readonly [(ngModel)]=\"menuItem.icon\" id=\"{{menuItem.id + '-icon'}}\" placeholder=\"(Optional)\" trans-placeholder>\n                <mat-icon [svgIcon]=\"menuItem.icon\"></mat-icon>\n            </div>\n        </div>\n\n        <mat-action-row>\n            <button mat-button color=\"warn\" class=\"delete-button\" (click)=\"confirmMenuItemDeletion()\" trans>Remove</button>\n        </mat-action-row>\n    </mat-expansion-panel>\n</mat-accordion>\n\n<ng-template #noActiveMenu>\n    <div class=\"no-menu-items\" trans>This menu has no items yet.</div>\n</ng-template>\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnDestroy} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {IconSelectorComponent} from '@common/shared/icon-selector/icon-selector.component';\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\n\n@Component({\n    selector: 'menu-items',\n    templateUrl: './menu-items.component.html',\n    styleUrls: ['./menu-items.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuItemsComponent implements OnDestroy {\n    public selectedMenuItem: MenuItem;\n    public subscriptions: Subscription[] = [];\n\n    constructor(\n        public menus: MenuEditor,\n        private modal: Modal,\n        private overlayPanel: OverlayPanel,\n        private cd: ChangeDetectorRef,\n    ) {}\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => {\n            subscription && subscription.unsubscribe();\n        });\n    }\n\n    public reorderMenuItems(e: CdkDragDrop<void>) {\n        this.menus.reorderActiveMenuItems(e.previousIndex, e.currentIndex);\n    }\n\n    /**\n     * Toggle specified menu item settings panel visibility.\n     */\n    public toggleMenuItem(item: MenuItem) {\n        if (this.selectedMenuItem === item) {\n            this.selectedMenuItem = null;\n        } else {\n            this.selectedMenuItem = item;\n        }\n    }\n\n    /**\n     * Ask user to confirm menu item deletion.\n     */\n    public confirmMenuItemDeletion() {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Menu Item',\n            body: 'Are you sure you want to delete this menu item?',\n            ok: 'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.menus.removeItem(this.selectedMenuItem);\n            this.selectedMenuItem = null;\n        });\n    }\n\n    public openIconSelector(origin: HTMLElement, menuItem: MenuItem) {\n        this.overlayPanel.open(IconSelectorComponent, {\n            position: RIGHT_POSITION,\n            origin: new ElementRef(origin),\n        }).valueChanged().subscribe(icon => {\n            menuItem.icon = icon;\n            this.menus.commitChanges();\n            this.cd.detectChanges();\n        });\n    }\n}\n","<appearance-panel-meta [path]=\"['Menus', menus.activeMenu$.value && menus.activeMenu$.value.name]\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n    <div class=\"menu-panel\" *ngIf=\"menus.activeMenu$ | async as activeMenu; else allMenuList\">\n        <div class=\"many-inputs menu-settings\">\n            <div class=\"input-container\">\n                <label for=\"menu-name\" trans>Menu Name</label>\n                <input type=\"text\" id=\"menu-name\" [(ngModel)]=\"activeMenu.name\" (ngModelChange)=\"menus.commitChanges()\">\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"menu-position\" trans>Menu Position</label>\n                <select id=\"menu-position\" [(ngModel)]=\"activeMenu.position\" (ngModelChange)=\"menus.commitChanges()\">\n                    <option [ngValue]=\"position\" *ngFor=\"let position of appearance.config.menus.positions\">{{getDisplayName(position)}}</option>\n                </select>\n            </div>\n        </div>\n\n        <menu-items></menu-items>\n\n        <div class=\"action-buttons\">\n            <button mat-button color=\"warn\" (click)=\"confirmMenuDeletion()\" trans>Delete Menu</button>\n            <button class=\"button flat add-item-button\" mat-button color=\"accent\" (click)=\"openAddItemPanel()\" trans>Add Item</button>\n        </div>\n    </div>\n\n    <ng-template #allMenuList>\n        <div class=\"menus\">\n            <div class=\"menu nav-item\" *ngFor=\"let menu of menus.allMenus$ | async\" (click)=\"setActiveMenu(menu)\">\n                <span class=\"name\">{{menu.name}}</span>\n                <mat-icon svgIcon=\"keyboard-arrow-right\" class=\"actions\"></mat-icon>\n            </div>\n\n            <div class=\"action-buttons\">\n                <button mat-button color=\"accent\" class=\"button primary\" (click)=\"menus.create()\" trans>Add a Menu</button>\n            </div>\n        </div>\n    </ng-template>\n</div>","import {ChangeDetectionStrategy, Component, ElementRef} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Settings} from '@common/core/config/settings.service';\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\nimport {AddMenuItemPanelComponent} from '@common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component';\nimport {Menu} from '@common/core/ui/custom-menu/menu';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\n\n@Component({\n    selector: 'menus-appearance-panel',\n    templateUrl: './menus-appearance-panel.component.html',\n    styleUrls: ['./menus-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenusAppearancePanelComponent {\n    constructor(\n        public appearance: AppearanceEditor,\n        public menus: MenuEditor,\n        private modal: Modal,\n        private settings: Settings,\n        private panel: OverlayPanel,\n        private el: ElementRef<HTMLElement>,\n    ) {\n        this.menus.setFromJson(this.settings.get('menus'));\n    }\n\n    public openAddItemPanel() {\n        const position = RIGHT_POSITION.slice();\n        position[0].offsetX = 10;\n        position[1].offsetX = 10;\n        this.panel.open(AddMenuItemPanelComponent, {\n            position: position,\n            origin: this.el,\n            panelClass: 'add-menu-item-panel-container'\n        });\n    }\n\n    public openPreviousPanel() {\n        if (this.menus.activeMenu$.value) {\n            this.menus.activeMenu$.next(null);\n        } else {\n            this.appearance.closeActivePanel();\n        }\n    }\n\n    public setActiveMenu(menu: Menu) {\n        this.menus.activeMenu$.next(menu);\n    }\n\n    public confirmMenuDeletion() {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Menu',\n            body: 'Are you sure you want to delete this menu?',\n            ok: 'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.menus.deleteActive();\n        });\n    }\n\n    public getDisplayName(name: string) {\n        return name.replace(/-/g, ' ');\n    }\n}\n","<appearance-panel-meta [path]=\"['Seo Settings']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div [formGroup]=\"form\" class=\"appearance-panel-content many-inputs\">\n    <ng-container *ngFor=\"let field of seoFields\">\n        <div class=\"input-container\">\n            <label [for]=\"field.key\" trans>{{field.name}}</label>\n            <textarea type=\"text\" [id]=\"field.key\" [formControlName]=\"field.key\" [placeholder]=\"field.defaultValue\" rows=\"2\"></textarea>\n        </div>\n    </ng-container>\n</div>","import {Component, OnInit, ChangeDetectionStrategy} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\n\ninterface SeoField {\n    name: string;\n    key: string;\n    defaultValue: string;\n    value: string;\n}\n\n@Component({\n    selector: 'seo-appearance-panel',\n    templateUrl: './seo-appearance-panel.component.html',\n    styleUrls: ['./seo-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SeoAppearancePanelComponent implements OnInit {\n    public seoFields: SeoField[];\n    public form = this.fb.group({});\n\n    constructor(\n        public editor: AppearanceEditor,\n        private fb: FormBuilder,\n    ) {}\n\n    ngOnInit() {\n        this.seoFields = this.editor.defaultSettings['seo_fields'];\n\n        this.seoFields.forEach(field => {\n            this.form.addControl(field.key, this.fb.control(field.value));\n        });\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.addChanges(value);\n        });\n    }\n}\n","<div class=\"modal-header\">\n    <h2 class=\"modal-title\" mat-dialog-title trans>Code Editor</h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<mat-dialog-content>\n    <div class=\"editor-container\">\n        <p class=\"info\" *ngIf=\"data.language === 'html'\" trans>If entering javascript, wrap it with &lt;script>&lt;/script> tag.</p>\n        <div class=\"editor\" #editor></div>\n    </div>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n    <button type=\"submit\" mat-raised-button color=\"accent\" (click)=\"confirm()\" [disabled]=\"syntaxInvalid$ | async\" trans>Update</button>\n</mat-dialog-actions>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>","import {ChangeDetectionStrategy, Component, ElementRef, Inject, OnInit, ViewChild} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {filter} from 'rxjs/operators';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {LazyLoaderService} from '@common/core/utils/lazy-loader.service';\nimport {BehaviorSubject} from 'rxjs';\n\ndeclare let ace;\n\nexport interface CodeEditorModalData {\n    contents?: string;\n    language: string;\n}\n\n@Component({\n    selector: 'code-editor-modal',\n    templateUrl: './code-editor-modal.component.html',\n    styleUrls: ['./code-editor-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CodeEditorModalComponent implements OnInit {\n    @ViewChild('editor', { static: true }) editorEl: ElementRef;\n\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public syntaxInvalid$ = new BehaviorSubject<boolean>(false);\n    private editor;\n\n    constructor(\n        private dialogRef: MatDialogRef<CodeEditorModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: CodeEditorModalData,\n        private lazyLoader: LazyLoaderService,\n    ) {}\n\n    ngOnInit() {\n        this.initEditor(this.data.contents, this.data.language);\n        this.overrideDialogCloseEvents();\n    }\n\n    public confirm() {\n        this.close(this.editor.getValue());\n    }\n\n    public close(value?: string) {\n        this.dialogRef.close(value);\n    }\n\n    private initEditor(contents: string, language = 'html') {\n        this.loading$.next(true);\n        this.lazyLoader.loadAsset('js/ace/ace.js', {type: 'js'}).then(() => {\n            this.editor = ace.edit(this.editorEl.nativeElement);\n            this.editor.getSession().setMode('ace/mode/' + language);\n            this.editor.setTheme('ace/theme/chrome');\n            this.editor.$blockScrolling = Infinity;\n            if (contents) this.editor.setValue(contents, 1);\n\n            this.editor.getSession().on('changeAnnotation', () => {\n                const annotations = this.editor.getSession().getAnnotations() as any[];\n\n                // hide !doctype syntax error\n                if (annotations[0] && /doctype first/.test(annotations[0].text)) {\n                    annotations.splice(0, 1);\n                    this.editor.getSession().setAnnotations(annotations);\n                    return;\n                }\n\n                // prevent editor submit if there are syntax errors\n                const syntaxInvalid = this.editor\n                    .getSession()\n                    .getAnnotations()\n                    .filter(a => a.type === 'error')\n                    .length > 0;\n                this.syntaxInvalid$.next(syntaxInvalid);\n            });\n            this.loading$.next(false);\n        });\n    }\n\n    /**\n     * Need to always send dialog data, regardless of how it was closed.\n     * Angular material does not provide easy way to do this, so\n     * we need to override backdrop click and escape key close events.\n     */\n    private overrideDialogCloseEvents() {\n        this.dialogRef.disableClose = true;\n\n        // close on backdrop click\n        this.dialogRef.backdropClick().subscribe(() => {\n            this.close();\n        });\n\n        // close on escape key\n        this.dialogRef.keydownEvents()\n            .pipe(filter(event => event.keyCode === ESCAPE))\n            .subscribe(() => this.close());\n    }\n}\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\nimport {CodeEditorModalComponent} from '@common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {SetCustomCss, SetCustomHtml} from '@common/shared/appearance/commands/appearance-commands';\n\n@Component({\n    selector: 'custom-code-appearance-panel',\n    templateUrl: './custom-code-appearance-panel.component.html',\n    styleUrls: ['./custom-code-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomCodeAppearancePanelComponent implements OnInit {\n    public form = this.fb.group({\n        'custom-code.css': [''],\n        'custom-code.html': [''],\n    });\n\n    constructor(\n        public editor: AppearanceEditor,\n        private fb: FormBuilder,\n        private modal: Modal,\n        private toast: Toast,\n    ) {}\n\n    ngOnInit() {\n        const defaults = {};\n        Object.keys(this.form.controls).forEach(key => {\n            defaults[key] = this.editor.currentValue(key);\n        });\n        this.form.patchValue(defaults);\n    }\n\n    public openModal(type: 'css'|'html') {\n        const key = 'custom-code.' + type;\n        const initialValue = this.form.value[key] || '',\n            params = {contents: this.form.value[key], language: type};\n        this.modal.open(CodeEditorModalComponent, params)\n            .afterClosed()\n            .subscribe(value => {\n                // undefined means user closed modal without clicking \"update\" button\n                if (value === undefined || initialValue === value) return;\n                const newValue = {[key]: value};\n                this.form.patchValue(newValue);\n                this.editor.saveChanges(newValue).subscribe(() => {\n                    this.addCodeToPreview(type, value);\n                    this.toast.open('Custom code saved');\n                });\n            });\n    }\n\n    private addCodeToPreview(type: 'css'|'html', content: string) {\n        if (type === 'css') {\n            this.editor.postMessage(new SetCustomCss(content));\n        } else {\n            this.editor.postMessage(new SetCustomHtml(content));\n        }\n    }\n}\n","<appearance-panel-meta [path]=\"['Custom Code']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n   <button type=\"button\" class=\"nav-item\" (click)=\"openModal('css')\">\n      <span class=\"text\" trans>Custom CSS</span>\n      <span class=\"actions\" trans>Modify</span>\n   </button>\n   <button class=\"nav-item\" (click)=\"openModal('html')\">\n      <span class=\"text\" trans>Custom HTML & Javascript</span>\n      <span class=\"actions\" trans>Modify</span>\n   </button>\n</div>","<mat-sidenav-container>\n    <mat-sidenav [opened]=\"!leftColumnIsHidden\" [mode]=\"(breakpoints.isMobile$ | async) ? 'over' : 'side'\" class=\"sidebar\">\n        <div class=\"header\">\n            <div class=\"back-button\" (click)=\"closeEditor()\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </div>\n            <div class=\"title\" trans>Appearance Editor</div>\n            <button\n                    mat-raised-button\n                    color=\"accent\"\n                    class=\"button primary save-button\"\n                    (click)=\"editor.saveChanges()\"\n                    [disabled]=\"!(editor.changes$ | async) || (editor.loading$ | async)\"\n            >\n                <span *ngIf=\"editor.changes$ | async; else saved\" trans>Save</span>\n                <ng-template #saved>\n                    <span trans>Saved</span>\n                </ng-template>\n            </button>\n        </div>\n\n        <ng-container *ngIf=\"editor.activePanel$ | async as activePanel; else navigation\">\n            <ng-container [ngSwitch]=\"activePanel.name\">\n                <general-appearance-panel *ngSwitchCase=\"'general'\"></general-appearance-panel>\n                <themes-appearance-panel *ngSwitchCase=\"'themes'\"></themes-appearance-panel>\n                <menus-appearance-panel *ngSwitchCase=\"'menus'\"></menus-appearance-panel>\n                <seo-appearance-panel *ngSwitchCase=\"'seo-settings'\"></seo-appearance-panel>\n                <custom-code-appearance-panel *ngSwitchCase=\"'custom-code'\"></custom-code-appearance-panel>\n                <ng-container *ngSwitchDefault>\n                    <ng-template *ngIf=\"panelPortal$ | async as portal\" [cdkPortalOutlet]=\"portal\"></ng-template>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n\n        <ng-template #navigation>\n            <div class=\"root-navigation\">\n                <a class=\"nav-item\" [routerLink]=\"[]\" [queryParams]=\"{panel: slugify(section.name)}\" *ngFor=\"let section of editor.config.sections\">\n                    <span class=\"text\" trans>{{viewName(section.name)}}</span>\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\n                </a>\n            </div>\n        </ng-template>\n\n    </mat-sidenav>\n\n    <mat-sidenav-content>\n        <div class=\"live-preview\">\n            <iframe src=\"about:blank\" #iframe></iframe>\n        </div>\n    </mat-sidenav-content>\n</mat-sidenav-container>\n\n<button mat-fab (click)=\"toggleLeftSidebar()\" class=\"sidebar-toggle-button\">\n    <mat-icon svgIcon=\"edit\"></mat-icon>\n</button>","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    Optional,\n    ViewChild\n} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {AppearanceEditor} from './appearance-editor/appearance-editor.service';\nimport {slugifyString} from '@common/core/utils/slugify-string';\nimport {Subscription} from 'rxjs';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {map} from 'rxjs/operators';\nimport {BreakpointsService} from '@common/core/ui/breakpoints.service';\nimport {APPEARANCE_EDITOR_CONFIG, AppearanceEditorConfig} from './appearance-editor-config.token';\n\n@Component({\n    selector: 'appearance',\n    templateUrl: './appearance.component.html',\n    styleUrls: ['./appearance.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppearanceComponent implements OnInit, OnDestroy {\n    @ViewChild('iframe', { static: true }) iframe: ElementRef;\n    private routerSub: Subscription;\n    public leftColumnIsHidden = false;\n\n    public panelPortal$ = this.editor.activePanel$.pipe(map(panel => {\n        return (panel && panel.component) ? new ComponentPortal(panel.component) : null;\n    }));\n\n    constructor(\n        public editor: AppearanceEditor,\n        private router: Router,\n        private route: ActivatedRoute,\n        public breakpoints: BreakpointsService,\n        @Inject(APPEARANCE_EDITOR_CONFIG) @Optional() public config: AppearanceEditorConfig[],\n    ) {}\n\n    ngOnInit() {\n        this.leftColumnIsHidden = this.breakpoints.isMobile$.value;\n        this.editor.init(\n            this.iframe.nativeElement,\n            this.route.snapshot.data.defaultSettings,\n            this.config,\n        );\n        this.routerSub = this.route.queryParams\n            .subscribe((params: {panel?: string}) => {\n                this.editor.openPanel(params.panel);\n            });\n    }\n\n    ngOnDestroy() {\n        this.routerSub && this.routerSub.unsubscribe();\n    }\n\n    public closeEditor() {\n        this.router.navigate(['admin']);\n    }\n\n    public slugify(str: string) {\n        return slugifyString(str);\n    }\n\n    public viewName(name: string) {\n        return name.replace('-', ' ');\n    }\n\n    public toggleLeftSidebar() {\n        this.leftColumnIsHidden = !this.leftColumnIsHidden;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {CanDeactivate} from '@angular/router';\nimport {AppearanceComponent} from './appearance.component';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Observable} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CanDeactivateAppearance implements CanDeactivate<AppearanceComponent> {\n    constructor(\n        private editor: AppearanceEditor,\n        private modal: Modal,\n    ) {}\n\n    canDeactivate(): Observable<boolean>|boolean {\n        if ( ! this.editor.changes$.value) return true;\n\n        return this.modal.show(ConfirmModalComponent, {\n            title: 'Close Appearance Editor',\n            body: 'Are you sure you want to close appearance editor?',\n            bodyBold: 'All unsaved changes will be lost.',\n            ok: 'Close',\n            cancel: 'Stay',\n        }).afterClosed();\n    }\n}\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {AppearanceComponent} from './appearance.component';\nimport {CanDeactivateAppearance} from './can-deactivate-appearance.guard';\nimport {AuthGuard} from '../../guards/auth-guard.service';\nimport {AppearanceEditorResolver} from './appearance-editor/appearance-editor-resolver.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AppearanceComponent,\n        data: {permissions: ['appearance.update']},\n        resolve: {defaultSettings: AppearanceEditorResolver},\n        canActivate: [AuthGuard],\n        canDeactivate: [CanDeactivateAppearance],\n        children: [\n            {path: ''},\n            {path: ':panel'},\n            {path: ':panel/:activeItem'},\n        ]\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AppearanceRoutingModule {}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot} from '@angular/router';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {EMPTY, Observable, of} from 'rxjs';\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AppearanceEditorResolver implements Resolve<GenericBackendResponse<{[key: string]: any}>> {\n    constructor(\n        private router: Router,\n        private http: AppHttpClient\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<GenericBackendResponse<{[key: string]: any}>> {\n        return this.http.get<GenericBackendResponse<{[key: string]: any}>>('admin/appearance/values').pipe(\n            catchError(() => {\n                this.router.navigate(['/admin']);\n                return EMPTY;\n            }),\n            mergeMap(response => {\n                if (response) {\n                    return of(response);\n                } else {\n                    this.router.navigate(['/admin']);\n                    return EMPTY;\n                }\n            })\n        );\n    }\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IconSelectorComponent} from '@common/shared/icon-selector/icon-selector.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\n\n\n@NgModule({\n    declarations: [\n        IconSelectorComponent,\n    ],\n    imports: [\n        CommonModule,\n        LoadingIndicatorModule,\n\n        MatButtonModule,\n        MatIconModule,\n    ],\n    exports: [\n        IconSelectorComponent,\n    ]\n})\nexport class IconSelectorModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {AppearanceComponent} from './appearance.component';\nimport {MenusAppearancePanelComponent} from './panels/menus-appearance-panel/menus-appearance-panel.component';\nimport {AddMenuItemPanelComponent} from './panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component';\nimport {AppearancePanelMetaComponent} from './appearance-panel-meta/appearance-panel-meta.component';\nimport {MenuItemsComponent} from './panels/menus-appearance-panel/menus/menu-items/menu-items.component';\nimport {AppearanceRoutingModule} from './appearance-routing.module';\nimport {CodeEditorModalComponent} from './panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component';\nimport {ThemesAppearancePanelComponent} from './panels/themes-appearance-panel/themes-appearance-panel.component';\nimport {CrupdateCssThemeModalComponent} from './panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component';\nimport {CssThemeColorsPanelComponent} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component';\nimport {GeneralAppearancePanelComponent} from '@common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component';\nimport {HighlightInPreviewDirective} from './highlight-in-preview.directive';\nimport {SeoAppearancePanelComponent} from '@common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component';\nimport {CustomCodeAppearancePanelComponent} from '@common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component';\nimport {AppearanceImageInputComponent} from '@common/admin/appearance/appearance-image-input/appearance-image-input.component';\nimport {IconSelectorModule} from '@common/shared/icon-selector/icon-selector.module';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ImageOrIconModule} from '@common/core/ui/image-or-icon/image-or-icon.module';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {ColorPickerInputModule} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.module';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {APPEARANCE_EDITOR_CONFIG, DEFAULT_APPEARANCE_EDITOR_CONFIG} from './appearance-editor-config.token';\n\n@NgModule({\n    imports: [\n        AppearanceRoutingModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        IconSelectorModule,\n        TranslationsModule,\n        ImageOrIconModule,\n        LoadingIndicatorModule,\n        ColorPickerInputModule,\n\n        // material\n        MatMenuModule,\n        MatProgressBarModule,\n        MatIconModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatExpansionModule,\n        DragDropModule,\n        MatSidenavModule,\n        PortalModule,\n        MatSlideToggleModule,\n    ],\n    exports: [\n        AppearancePanelMetaComponent,\n        HighlightInPreviewDirective,\n        AppearanceImageInputComponent,\n    ],\n    declarations: [\n        AppearanceComponent,\n        AddMenuItemPanelComponent,\n        AppearancePanelMetaComponent,\n        MenuItemsComponent,\n        CodeEditorModalComponent,\n        CrupdateCssThemeModalComponent,\n        CssThemeColorsPanelComponent,\n        AppearanceImageInputComponent,\n        MenusAppearancePanelComponent,\n        ThemesAppearancePanelComponent,\n        GeneralAppearancePanelComponent,\n        SeoAppearancePanelComponent,\n        CustomCodeAppearancePanelComponent,\n        HighlightInPreviewDirective,\n    ],\n    providers: [\n        {\n            provide: APPEARANCE_EDITOR_CONFIG,\n            useValue: DEFAULT_APPEARANCE_EDITOR_CONFIG,\n            multi: true,\n        }\n    ]\n})\nexport class BaseAppearanceModule {\n}\n","import { DOCUMENT, CommonModule } from '@angular/common';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Attribute, NgZone, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\n\nconst _c0 = [\"sliderWrapper\"];\nconst activeEventOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlider),\n    multi: true\n};\n/** A simple change event emitted by the MatSlider component. */\nclass MatSliderChange {\n}\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nclass MatSlider extends _MatSliderMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _ngZone, _document, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._invert = false;\n        this._max = 100;\n        this._min = 0;\n        this._step = 1;\n        this._thumbLabel = false;\n        this._tickInterval = 0;\n        this._value = null;\n        this._vertical = false;\n        /** Event emitted when the slider value has changed. */\n        this.change = new EventEmitter();\n        /** Event emitted when the slider thumb moves. */\n        this.input = new EventEmitter();\n        /**\n         * Emits when the raw value of the slider changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this.onTouched = () => { };\n        this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        this._isSliding = false;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        this._isActive = false;\n        /** The size of a tick interval as a percentage of the size of the track. */\n        this._tickIntervalPercent = 0;\n        /** The dimensions of the slider. */\n        this._sliderDimensions = null;\n        this._controlValueAccessorChangeFn = () => { };\n        /** Subscription to the Directionality change EventEmitter. */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        /** Called when the user has put their pointer down on the slider. */\n        this._pointerDown = (event) => {\n            // Don't do anything if the slider is disabled or the\n            // user is using anything other than the main mouse button.\n            if (this.disabled || this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n                return;\n            }\n            this._ngZone.run(() => {\n                const oldValue = this.value;\n                const pointerPosition = getPointerPositionOnPage(event);\n                this._isSliding = true;\n                this._lastPointerEvent = event;\n                event.preventDefault();\n                this._focusHostElement();\n                this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n                this._bindGlobalEvents(event);\n                this._focusHostElement();\n                this._updateValueFromPosition(pointerPosition);\n                this._valueOnSlideStart = this.value;\n                this._pointerPositionOnStart = pointerPosition;\n                // Emit a change and input event if the value changed.\n                if (oldValue != this.value) {\n                    this._emitInputEvent();\n                    this._emitChangeEvent();\n                }\n            });\n        };\n        /**\n         * Called when the user has moved their pointer after\n         * starting to drag. Bound on the document level.\n         */\n        this._pointerMove = (event) => {\n            if (this._isSliding) {\n                // Prevent the slide from selecting anything else.\n                event.preventDefault();\n                const oldValue = this.value;\n                this._lastPointerEvent = event;\n                this._updateValueFromPosition(getPointerPositionOnPage(event));\n                // Native range elements always emit `input` events when the value changed while sliding.\n                if (oldValue != this.value) {\n                    this._emitInputEvent();\n                }\n            }\n        };\n        /** Called when the user has lifted their pointer. Bound on the document level. */\n        this._pointerUp = (event) => {\n            if (this._isSliding) {\n                const pointerPositionOnStart = this._pointerPositionOnStart;\n                const currentPointerPosition = getPointerPositionOnPage(event);\n                event.preventDefault();\n                this._removeGlobalEvents();\n                this._valueOnSlideStart = this._pointerPositionOnStart = this._lastPointerEvent = null;\n                this._isSliding = false;\n                if (this._valueOnSlideStart != this.value && !this.disabled &&\n                    pointerPositionOnStart && (pointerPositionOnStart.x !== currentPointerPosition.x ||\n                    pointerPositionOnStart.y !== currentPointerPosition.y)) {\n                    this._emitChangeEvent();\n                }\n            }\n        };\n        /** Called when the window has lost focus. */\n        this._windowBlur = () => {\n            // If the window is blurred while dragging we need to stop dragging because the\n            // browser won't dispatch the `mouseup` and `touchend` events anymore.\n            if (this._lastPointerEvent) {\n                this._pointerUp(this._lastPointerEvent);\n            }\n        };\n        this._document = _document;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        _ngZone.runOutsideAngular(() => {\n            const element = elementRef.nativeElement;\n            element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n            element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n        });\n    }\n    /** Whether the slider is inverted. */\n    get invert() { return this._invert; }\n    set invert(value) {\n        this._invert = coerceBooleanProperty(value);\n    }\n    /** The maximum value that the slider can have. */\n    get max() { return this._max; }\n    set max(v) {\n        this._max = coerceNumberProperty(v, this._max);\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The minimum value that the slider can have. */\n    get min() { return this._min; }\n    set min(v) {\n        this._min = coerceNumberProperty(v, this._min);\n        // If the value wasn't explicitly set by the user, set it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The values at which the thumb will snap. */\n    get step() { return this._step; }\n    set step(v) {\n        this._step = coerceNumberProperty(v, this._step);\n        if (this._step % 1 !== 0) {\n            this._roundToDecimal = this._step.toString().split('.').pop().length;\n        }\n        // Since this could modify the label, we need to notify the change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Whether or not to show the thumb label. */\n    get thumbLabel() { return this._thumbLabel; }\n    set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     */\n    get tickInterval() { return this._tickInterval; }\n    set tickInterval(value) {\n        if (value === 'auto') {\n            this._tickInterval = 'auto';\n        }\n        else if (typeof value === 'number' || typeof value === 'string') {\n            this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n        }\n        else {\n            this._tickInterval = 0;\n        }\n    }\n    /** Value of the slider. */\n    get value() {\n        // If the value needs to be read and it is still uninitialized, initialize it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        return this._value;\n    }\n    set value(v) {\n        if (v !== this._value) {\n            let value = coerceNumberProperty(v);\n            // While incrementing by a decimal we can end up with values like 33.300000000000004.\n            // Truncate it to ensure that it matches the label and to make it easier to work with.\n            if (this._roundToDecimal) {\n                value = parseFloat(value.toFixed(this._roundToDecimal));\n            }\n            this._value = value;\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the slider is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** The value to be used for display purposes. */\n    get displayValue() {\n        if (this.displayWith) {\n            // Value is never null but since setters and getters cannot have\n            // different types, the value getter is also typed to return null.\n            return this.displayWith(this.value);\n        }\n        // Note that this could be improved further by rounding something like 0.999 to 1 or\n        // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n        // every change detection cycle.\n        if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n            return this.value.toFixed(this._roundToDecimal);\n        }\n        return this.value || 0;\n    }\n    /** set focus to the host element */\n    focus(options) {\n        this._focusHostElement(options);\n    }\n    /** blur the host element */\n    blur() {\n        this._blurHostElement();\n    }\n    /** The percentage of the slider that coincides with the value. */\n    get percent() { return this._clamp(this._percent); }\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     */\n    get _invertAxis() {\n        // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n        // top. However from a y-axis standpoint this is inverted.\n        return this.vertical ? !this.invert : this.invert;\n    }\n    /** Whether the slider is at its minimum value. */\n    get _isMinValue() {\n        return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     */\n    get _thumbGap() {\n        if (this.disabled) {\n            return DISABLED_THUMB_GAP;\n        }\n        if (this._isMinValue && !this.thumbLabel) {\n            return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n        }\n        return 0;\n    }\n    /** CSS styles for the track background element. */\n    get _trackBackgroundStyles() {\n        const axis = this.vertical ? 'Y' : 'X';\n        const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n        const sign = this._shouldInvertMouseCoords() ? '-' : '';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n        };\n    }\n    /** CSS styles for the track fill element. */\n    get _trackFillStyles() {\n        const percent = this.percent;\n        const axis = this.vertical ? 'Y' : 'X';\n        const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n        const sign = this._shouldInvertMouseCoords() ? '' : '-';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`,\n            // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n            // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n            // the value of the slider is 0, we can easily get into this situation. We force a\n            // recalculation by changing the element's `display` when it goes from 0 to any other value.\n            display: percent === 0 ? 'none' : ''\n        };\n    }\n    /** CSS styles for the ticks container element. */\n    get _ticksContainerStyles() {\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the ticks container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n        let offset = this._tickIntervalPercent / 2 * 100;\n        return {\n            'transform': `translate${axis}(${sign}${offset}%)`\n        };\n    }\n    /** CSS styles for the ticks element. */\n    get _ticksStyles() {\n        let tickSize = this._tickIntervalPercent * 100;\n        let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n        let axis = this.vertical ? 'Y' : 'X';\n        // Depending on the direction we pushed the ticks container, push the ticks the opposite\n        // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n        // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n        let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n        let styles = {\n            'backgroundSize': backgroundSize,\n            // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n            'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n        };\n        if (this._isMinValue && this._thumbGap) {\n            let side;\n            if (this.vertical) {\n                side = this._invertAxis ? 'Bottom' : 'Top';\n            }\n            else {\n                side = this._invertAxis ? 'Right' : 'Left';\n            }\n            styles[`padding${side}`] = `${this._thumbGap}px`;\n        }\n        return styles;\n    }\n    get _thumbContainerStyles() {\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the thumb container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        let invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n        let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n        return {\n            'transform': `translate${axis}(-${offset}%)`\n        };\n    }\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n    _shouldInvertMouseCoords() {\n        return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    }\n    /** The language direction for this slider element. */\n    _getDirection() {\n        return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((origin) => {\n            this._isActive = !!origin && origin !== 'keyboard';\n            this._changeDetectorRef.detectChanges();\n        });\n        if (this._dir) {\n            this._dirChangeSubscription = this._dir.change.subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    ngOnDestroy() {\n        const element = this._elementRef.nativeElement;\n        element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n        element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n        this._lastPointerEvent = null;\n        this._removeGlobalEvents();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._dirChangeSubscription.unsubscribe();\n    }\n    _onMouseenter() {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    _onFocus() {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    _onBlur() {\n        this.onTouched();\n    }\n    _onKeydown(event) {\n        if (this.disabled || hasModifierKey(event)) {\n            return;\n        }\n        const oldValue = this.value;\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n            this._emitChangeEvent();\n        }\n        this._isSliding = true;\n        event.preventDefault();\n    }\n    _onKeyup() {\n        this._isSliding = false;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /**\n     * Binds our global move and end events. They're bound at the document level and only while\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\n     * as they're swiping across the screen.\n     */\n    _bindGlobalEvents(triggerEvent) {\n        // Note that we bind the events to the `document`, because it allows us to capture\n        // drag cancel events where the user's pointer is outside the browser window.\n        const document = this._document;\n        const isTouch = isTouchEvent(triggerEvent);\n        const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n        const endEventName = isTouch ? 'touchend' : 'mouseup';\n        document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n        document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n        if (isTouch) {\n            document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        }\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.addEventListener('blur', this._windowBlur);\n        }\n    }\n    /** Removes any global event listeners that we may have added. */\n    _removeGlobalEvents() {\n        const document = this._document;\n        document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n        document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n        document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n        document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n        document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.removeEventListener('blur', this._windowBlur);\n        }\n    }\n    /** Increments the slider by the given number of steps (negative number decrements). */\n    _increment(numSteps) {\n        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    }\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n    _updateValueFromPosition(pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        let posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        let percent = this._clamp((posComponent - offset) / size);\n        if (this._shouldInvertMouseCoords()) {\n            percent = 1 - percent;\n        }\n        // Since the steps may not divide cleanly into the max value, if the user\n        // slid to 0 or 100 percent, we jump to the min/max value. This approach\n        // is slightly more intuitive than using `Math.ceil` below, because it\n        // follows the user's pointer closer.\n        if (percent === 0) {\n            this.value = this.min;\n        }\n        else if (percent === 1) {\n            this.value = this.max;\n        }\n        else {\n            const exactValue = this._calculateValue(percent);\n            // This calculation finds the closest step by finding the closest\n            // whole number divisible by the step relative to the min.\n            const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n            // The value needs to snap to the min and max.\n            this.value = this._clamp(closestValue, this.min, this.max);\n        }\n    }\n    /** Emits a change event if the current value is different from the last emitted value. */\n    _emitChangeEvent() {\n        this._controlValueAccessorChangeFn(this.value);\n        this.valueChange.emit(this.value);\n        this.change.emit(this._createChangeEvent());\n    }\n    /** Emits an input event when the current value is different from the last emitted value. */\n    _emitInputEvent() {\n        this.input.emit(this._createChangeEvent());\n    }\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n    _updateTickIntervalPercent() {\n        if (!this.tickInterval || !this._sliderDimensions) {\n            return;\n        }\n        if (this.tickInterval == 'auto') {\n            let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n            let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            let pixelsPerTick = stepsPerTick * this.step;\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n    }\n    /** Creates a slider change object from the specified value. */\n    _createChangeEvent(value = this.value) {\n        let event = new MatSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    }\n    /** Calculates the percentage of the slider that a value is. */\n    _calculatePercentage(value) {\n        return ((value || 0) - this.min) / (this.max - this.min);\n    }\n    /** Calculates the value a percentage of the slider corresponds to. */\n    _calculateValue(percentage) {\n        return this.min + percentage * (this.max - this.min);\n    }\n    /** Return a number between two numbers. */\n    _clamp(value, min = 0, max = 1) {\n        return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n    _getSliderDimensions() {\n        return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n    _focusHostElement(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Blurs the native element. */\n    _blurHostElement() {\n        this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n}\nMatSlider.ɵfac = function MatSlider_Factory(t) { return new (t || MatSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlider.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlider, selectors: [[\"mat-slider\"]], viewQuery: function MatSlider_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n    } }, hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\", \"mat-focus-indicator\"], hostVars: 28, hostBindings: function MatSlider_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSlider_blur_HostBindingHandler() { return ctx._onBlur(); })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); })(\"keyup\", function MatSlider_keyup_HostBindingHandler() { return ctx._onKeyup(); })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() { return ctx._onMouseenter(); })(\"selectstart\", function MatSlider_selectstart_HostBindingHandler($event) { return $event.preventDefault(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._invertAxis)(\"mat-slider-invert-mouse-coords\", ctx._shouldInvertMouseCoords())(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue)(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue && ctx._thumbGap && ctx._invertAxis)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", color: \"color\", tabIndex: \"tabIndex\", invert: \"invert\", max: \"max\", min: \"min\", value: \"value\", step: \"step\", thumbLabel: \"thumbLabel\", tickInterval: \"tickInterval\", vertical: \"vertical\", displayWith: \"displayWith\" }, outputs: { change: \"change\", input: \"input\", valueChange: \"valueChange\" }, exportAs: [\"matSlider\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 13, vars: 6, consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]], template: function MatSlider_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelement(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11);\n        ɵngcc0.ɵɵtext(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackBackgroundStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackFillStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksContainerStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._thumbContainerStyles);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵtextInterpolate(ctx.displayValue);\n    } }, directives: [ɵngcc3.NgStyle], styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlider.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlider.propDecorators = {\n    invert: [{ type: Input }],\n    max: [{ type: Input }],\n    min: [{ type: Input }],\n    step: [{ type: Input }],\n    thumbLabel: [{ type: Input }],\n    tickInterval: [{ type: Input }],\n    value: [{ type: Input }],\n    displayWith: [{ type: Input }],\n    vertical: [{ type: Input }],\n    change: [{ type: Output }],\n    input: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    _sliderWrapper: [{ type: ViewChild, args: ['sliderWrapper',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlider, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slider',\n                exportAs: 'matSlider',\n                providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                host: {\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)',\n                    '(keyup)': '_onKeyup()',\n                    '(mouseenter)': '_onMouseenter()',\n                    // On Safari starting to slide temporarily triggers text selection mode which\n                    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n                    '(selectstart)': '$event.preventDefault()',\n                    'class': 'mat-slider mat-focus-indicator',\n                    'role': 'slider',\n                    '[tabIndex]': 'tabIndex',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.aria-valuemax]': 'max',\n                    '[attr.aria-valuemin]': 'min',\n                    '[attr.aria-valuenow]': 'value',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-slider-disabled]': 'disabled',\n                    '[class.mat-slider-has-ticks]': 'tickInterval',\n                    '[class.mat-slider-horizontal]': '!vertical',\n                    '[class.mat-slider-axis-inverted]': '_invertAxis',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if mouse coordinates need to be inverted.\n                    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n                    '[class.mat-slider-sliding]': '_isSliding',\n                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                    '[class.mat-slider-vertical]': 'vertical',\n                    '[class.mat-slider-min-value]': '_isMinValue',\n                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['disabled', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { change: [{\n            type: Output\n        }], input: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], invert: [{\n            type: Input\n        }], max: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], step: [{\n            type: Input\n        }], thumbLabel: [{\n            type: Input\n        }], tickInterval: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], displayWith: [{\n            type: Input\n        }], _sliderWrapper: [{\n            type: ViewChild,\n            args: ['sliderWrapper']\n        }] }); })();\n/** Returns whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\nfunction getPointerPositionOnPage(event) {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n    return { x: point.clientX, y: point.clientY };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSliderModule {\n}\nMatSliderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSliderModule });\nMatSliderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSliderModule_Factory(t) { return new (t || MatSliderModule)(); }, imports: [[CommonModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSliderModule, { declarations: function () { return [MatSlider]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatSlider, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSliderModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatSlider, MatCommonModule],\n                declarations: [MatSlider]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };\n\n//# sourceMappingURL=slider.js.map","<appearance-panel-meta [path]=\"path$ | async\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n    <ng-container *ngIf=\"selectedSubpanel$ | async as selectedSubpanel; else mainPanel\">\n        <div [ngSwitch]=\"selectedSubpanel\">\n            <ng-container *ngSwitchCase=\"'primaryFeatures'\">\n                <div *ngFor=\"let group of primaryArray().controls; index as index\" [formGroup]=\"group\"\n                     class=\"many-inputs feature-group\">\n                    <div class=\"feature-group-header\">\n                        <div class=\"text\">{{'Feature' | trans}} #{{index + 1}}</div>\n                    </div>\n                    <div class=\"input-container\">\n                        <label [for]=\"'primary.' + index + '.title'\" trans>Title</label>\n                        <input type=\"text\" [id]=\"'primary.' + index + '.title'\" formControlName=\"title\"\n                               [placeholder]=\"defaultValue('primaryFeatures.' + index + '.title')\"\n                               highlightInPreview=\".inline-feature:nth-child({{index + 1}}) h3\" required>\n                    </div>\n                    <div class=\"input-container\">\n                        <label [for]=\"'primary.' + index + '.subtitle'\" trans>Subtitle</label>\n                        <input type=\"text\" [id]=\"'primary.' + index + '.subtitle'\" formControlName=\"subtitle\"\n                               [placeholder]=\"defaultValue('primaryFeatures.' + index + '.subtitle')\"\n                               highlightInPreview=\".inline-feature:nth-child({{index + 1}}) p\" required>\n                    </div>\n                    <appearance-image-input [defaultValue]=\"defaultValue('primaryFeatures.' + index + '.image')\"\n                                            formControlName=\"image\"\n                                            diskPrefix=\"homepage\"\n                                            highlightInPreview=\".inline-feature:nth-child({{index + 1}}) img\" trans>\n                        Image\n                    </appearance-image-input>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'secondaryFeatures'\">\n                <div *ngFor=\"let group of secondaryArray().controls; index as index\" [formGroup]=\"group\"\n                     class=\"many-inputs feature-group\">\n                    <div class=\"feature-group-header\">\n                        <div class=\"text\">{{'Feature' | trans}} #{{index + 1}}</div>\n                        <button mat-icon-button color=\"warn\" (click)=\"removeFeature('secondary', index)\">\n                            <mat-icon svgIcon=\"close\"></mat-icon>\n                        </button>\n                    </div>\n                    <div class=\"input-container\">\n                        <label [for]=\"'secondary.' + index + '.title'\" trans>Title</label>\n                        <input type=\"text\" [id]=\"'secondary.' + index + '.title'\" formControlName=\"title\"\n                               [placeholder]=\"defaultValue('secondaryFeatures.' + index + '.title')\"\n                               highlightInPreview=\".big-feature:nth-child({{index + 1}}) h2\" required>\n                    </div>\n                    <div class=\"input-container\">\n                        <label [for]=\"'secondary.' + index + '.subtitle'\" trans>Subtitle</label>\n                        <input type=\"text\" [id]=\"'secondary.' + index + '.subtitle'\" formControlName=\"subtitle\"\n                               [placeholder]=\"defaultValue('secondaryFeatures.' + index + '.subtitle')\"\n                               highlightInPreview=\".big-feature:nth-child({{index + 1}}) small\" required>\n                    </div>\n                    <div class=\"input-container\">\n                        <label [for]=\"'secondary.' + index + '.description'\" trans>Description</label>\n                        <textarea type=\"text\" [id]=\"'secondary.' + index + '.description'\" formControlName=\"description\"\n                                  rows=\"4\" [placeholder]=\"defaultValue('secondaryFeatures.' + index + '.description')\"\n                                  highlightInPreview=\".big-feature:nth-child({{index + 1}}) p\"\n                                  required></textarea>\n                    </div>\n                    <appearance-image-input [defaultValue]=\"defaultValue('secondaryFeatures.' + index + '.image')\"\n                                            highlightInPreview=\".big-feature:nth-child({{index + 1}}) img\"\n                                            diskPrefix=\"homepage\"\n                                            formControlName=\"image\" trans>Image\n                    </appearance-image-input>\n                </div>\n                <button mat-flat-button color=\"accent\" (click)=\"addFeature('secondary')\" trans>Add</button>\n            </ng-container>\n            <div *ngSwitchCase=\"'actions'\" class=\"many-inputs\" [formGroup]=\"form.get('actions')\">\n                <div class=\"input-container\">\n                    <label for=\"home.actions.inputText\" trans>Input Text</label>\n                    <input type=\"text\" id=\"home.actions.inputText\" formControlName=\"inputText\"\n                           highlightInPreview=\"new-link-form input\"\n                           [placeholder]=\"defaultValue('actions.inputText')\" required>\n                </div>\n                <div class=\"input-container\">\n                    <label for=\"home.actions.inputButton\" trans>Input Button</label>\n                    <input type=\"text\" id=\"home.actions.inputButton\" formControlName=\"inputButton\"\n                           highlightInPreview=\"new-link-form .mat-flat-button\"\n                           [placeholder]=\"defaultValue('actions.inputButton')\" required>\n                </div>\n                <div class=\"input-container\">\n                    <label for=\"home.actions.cta1\" trans>Call to Action #1</label>\n                    <input type=\"text\" id=\"home.actions.cta1\" formControlName=\"cta1\"\n                           highlightInPreview=\".get-started-button\"\n                           [placeholder]=\"defaultValue('actions.cta1')\" required>\n                </div>\n                <div class=\"input-container\">\n                    <label for=\"home.actions.cta2\" trans>Call to Action #2</label>\n                    <input type=\"text\" id=\"home.actions.cta2\" formControlName=\"cta2\"\n                           highlightInPreview=\".learn-more-button\"\n                           [placeholder]=\"defaultValue('actions.cta2')\" required>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-template #mainPanel>\n        <div [formGroup]=\"form\" class=\"many-inputs\">\n            <div class=\"input-container\">\n                <label for=\"home.header.title\" trans>Header Title</label>\n                <input type=\"text\" id=\"home.header.title\" formControlName=\"headerTitle\"\n                       [placeholder]=\"defaultValue('headerTitle')\" highlightInPreview=\".header-title\" required>\n            </div>\n            <div class=\"input-container\">\n                <label for=\"home.header.subtitle\" trans>Header Subtitle</label>\n                <textarea type=\"text\" id=\"home.header.subtitle\" formControlName=\"headerSubtitle\" rows=\"4\"\n                          [placeholder]=\"defaultValue('headerSubtitle')\" highlightInPreview=\".header-description\"\n                          required></textarea>\n            </div>\n            <appearance-image-input [defaultValue]=\"defaultValue('headerImage')\"\n                                    highlightInPreview=\".hero\"\n                                    diskPrefix=\"homepage\"\n                                    formControlName=\"headerImage\" trans>Header Image\n            </appearance-image-input>\n            <mat-slider min=\"0\" max=\"1\" step=\"0.1\" formControlName=\"headerImageOpacity\" class=\"opacity-slider\"></mat-slider>\n            <color-picker-input formControlName=\"headerOverlayColor1\" trans>Header Overlay Color 1</color-picker-input>\n            <color-picker-input formControlName=\"headerOverlayColor2\" trans>Header Overlay Color 2</color-picker-input>\n\n\n            <div class=\"separator\"></div>\n\n            <ul class=\"unstyled-list\">\n                <li (click)=\"openSubpanel('actions')\" class=\"nav-item\">\n                    <span class=\"text\" trans>Action Buttons</span>\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\n                </li>\n                <li (click)=\"openSubpanel('primaryFeatures')\" class=\"nav-item\">\n                    <span class=\"text\" trans>Primary Features</span>\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\n                </li>\n                <li (click)=\"openSubpanel('secondaryFeatures')\" class=\"nav-item\">\n                    <span class=\"text\" trans>Secondary Features</span>\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\n                </li>\n            </ul>\n\n            <div class=\"separator\"></div>\n\n            <div class=\"input-container\">\n                <label for=\"home.footer.title\" trans>Footer Title</label>\n                <input type=\"text\" id=\"home.footer.title\" formControlName=\"footerTitle\"\n                       [placeholder]=\"defaultValue('footerTitle')\" highlightInPreview=\".footer-title\" required>\n            </div>\n            <div class=\"input-container\">\n                <label for=\"home.footer.subtitle\" trans>Footer Subtitle</label>\n                <textarea type=\"text\" id=\"home.footer.subtitle\" formControlName=\"footerSubtitle\" rows=\"4\"\n                          [placeholder]=\"defaultValue('footerSubtitle')\" highlightInPreview=\".footer-description\"\n                          required></textarea>\n            </div>\n            <appearance-image-input [defaultValue]=\"defaultValue('footerImage')\"\n                                    highlightInPreview=\".bottom-cta\"\n                                    diskPrefix=\"homepage\"\n                                    formControlName=\"footerImage\" trans>Footer Image\n            </appearance-image-input>\n        </div>\n    </ng-template>\n</div>\n","import {Component, OnInit, ChangeDetectionStrategy} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {FormArray, FormBuilder} from '@angular/forms';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {Settings} from '@common/core/config/settings.service';\nimport {map} from 'rxjs/operators';\nimport * as Dot from 'dot-object';\nimport {HomepageContent} from '../../../landing/homepage-content';\n\nconst CONFIG_KEY = 'homepage.appearance';\n\n@Component({\n    selector: 'homepage-appearance-panel',\n    templateUrl: './homepage-appearance-panel.component.html',\n    styleUrls: ['./homepage-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HomepageAppearancePanelComponent implements OnInit {\n    public selectedSubpanel$ = new BehaviorSubject<string>(null);\n    public defaultValues: HomepageContent;\n\n    public path$ = this.selectedSubpanel$.pipe(map(panel => {\n        const path = ['Homepage'];\n        if (panel) path.push(panel);\n        return path;\n    }));\n\n    public form = this.fb.group({\n        headerTitle: [''],\n        headerSubtitle: [''],\n        headerImage: [''],\n        headerImageOpacity: [1],\n        headerOverlayColor1: [''],\n        headerOverlayColor2: [''],\n        footerTitle: [''],\n        footerSubtitle: [''],\n        footerImage: [''],\n        actions: this.fb.group({\n            inputText: [''],\n            inputButton: [''],\n            cta1: [''],\n            cta2: [''],\n        }),\n        primaryFeatures: this.fb.array([]),\n        secondaryFeatures: this.fb.array([]),\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private editor: AppearanceEditor,\n        private settings: Settings,\n    ) {}\n\n    ngOnInit() {\n        const data = this.settings.getJson(CONFIG_KEY) as HomepageContent;\n        this.defaultValues = JSON.parse(this.editor.defaultSettings[CONFIG_KEY]);\n\n        data.primaryFeatures.forEach(() => {\n            this.addFeature('primary');\n        });\n        data.secondaryFeatures.forEach(() => {\n            this.addFeature('secondary');\n        });\n\n        this.form.patchValue(data);\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.setConfig(CONFIG_KEY, value);\n            this.editor.addChanges({[CONFIG_KEY]: value});\n        });\n    }\n\n    public openPreviousPanel() {\n        if (this.selectedSubpanel$.value) {\n            this.openSubpanel(null);\n        } else {\n            this.editor.closeActivePanel();\n        }\n    }\n\n    public openSubpanel(name: string) {\n        this.selectedSubpanel$.next(name);\n    }\n\n    public addFeature(type: 'primary'|'secondary') {\n        const features = this.form.get(`${type}Features`) as FormArray;\n        const data: {[key: string]: string[]} = {title: [''], subtitle: [''], image: ['']};\n        if (type === 'secondary') {\n            data.description = [''];\n        }\n        features.push(this.fb.group(data));\n    }\n\n    public removeFeature(type: 'primary'|'secondary', index: number) {\n        const features = this.form.get(`${type}Features`) as FormArray;\n        features.removeAt(index);\n    }\n\n    public defaultValue(key: string): string {\n        return Dot.pick(key, this.defaultValues) || '';\n    }\n\n    public primaryArray() {\n        return this.form.get('primaryFeatures') as FormArray;\n    }\n\n    public secondaryArray() {\n        return this.form.get('secondaryFeatures') as FormArray;\n    }\n}\n","import {HomepageAppearancePanelComponent} from './homepage-appearance-panel/homepage-appearance-panel.component';\nimport {AppearanceEditorConfig} from '../../../common/admin/appearance/appearance-editor-config.token';\n\nexport const APP_APPEARANCE_CONFIG: AppearanceEditorConfig = {\n    defaultRoute: '/',\n    navigationRoutes: [\n        '/',\n        'dashboard',\n    ],\n    menus: {\n        positions: [\n            'dashboard-navbar',\n            'dashboard-sidebar',\n            'homepage-navbar',\n            'admin-navbar',\n            'custom-page-navbar',\n            'footer',\n        ],\n        availableRoutes: [\n            'dashboard',\n            'dashboard/links',\n            'dashboard/groups',\n            'dashboard/custom-domains',\n            'dashboard/link-overlays',\n            'dashboard/custom-pages',\n            'dashboard/pixels',\n            'dashboard/workspaces',\n        ]\n    },\n    sections: [\n        {\n            name: 'homepage',\n            component: HomepageAppearancePanelComponent,\n            position: 1,\n        }\n    ]\n};\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BaseAppearanceModule} from '@common/admin/appearance/base-appearance.module';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {HomepageAppearancePanelComponent} from './homepage-appearance-panel/homepage-appearance-panel.component';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {ColorPickerInputModule} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.module';\nimport {APPEARANCE_EDITOR_CONFIG} from '../../../common/admin/appearance/appearance-editor-config.token';\nimport {APP_APPEARANCE_CONFIG} from './app-appearance-config';\n\n\n@NgModule({\n    declarations: [\n        HomepageAppearancePanelComponent,\n    ],\n    imports: [\n        CommonModule,\n        BaseAppearanceModule,\n        ReactiveFormsModule,\n        ColorPickerInputModule,\n\n        // material\n        MatIconModule,\n        MatButtonModule,\n        TranslationsModule,\n        MatSliderModule,\n    ],\n    providers: [\n        {\n            provide: APPEARANCE_EDITOR_CONFIG,\n            useValue: APP_APPEARANCE_CONFIG,\n            multi: true,\n        }\n    ]\n})\nexport class AppAppearanceModule {\n}\n"]}